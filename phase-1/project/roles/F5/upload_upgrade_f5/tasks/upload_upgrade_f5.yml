---

# - name: Upload image to device
#   f5networks.f5_modules.bigip_software_image:
#     image: '{{ repo_path }}/{{ upgrade_image }}'
#     provider: "{{ provider }}"
#   delegate_to: localhost

- name: Get checksum
  f5networks.f5_modules.bigip_command:
    provider: "{{ provider }}"
    commands: 'run /util bash -c "md5sum /shared/images/{{ upgrade_image }}"'
  delegate_to: localhost
  register: calc_checksum
  failed_when: calc_checksum.stdout.0.split(' ').0 != trusted_checksum

- name: Print Checksums
  debug:
    msg: 
      - "calulated md5sum is {{ calc_checksum.stdout.0.split(' ').0 }}"
      -  "trusted md5sum is {{ trusted_checksum }}"


# need to add code for finding standby node upgrade, then upgrade standby then reboot, then do active. 

- name: Find Standby Unit in HA Pair and upload/activate first
  bigip_command:
    provider: "{{ provider }}"
    commands:
      - bash -c "cat /var/prompt/ps1"
  register: find_standby
  delegate_to: localhost

- name: Install and activate on Standby Unit
  f5networks.f5_modules.bigip_software_install:
    image: '{{ upgrade_image }}'
    volume: "{{ volume_info.stdout }}"
    state: activated
    provider: "{{ provider }}"
  when: '"Standby" in standby[0]'
  delegate_to: localhost

- name: Wait for standby device to be healthy before proceeding
  bigip_command:
    provider: "{{ provider }}"
    match: "any"
    warn: no
    commands:
      - bash -c "cat /var/prompt/ps1"
    wait_for:
      - result[0] contains Active
      - result[0] contains Standby
    retries: 12
    interval: 10
  register: result  
  any_errors_fatal: true  
  when: '"Standby" in standby[0]'
  delegate_to: localhost

- name: Install and activate on Active Unit
  f5networks.f5_modules.bigip_software_install:
    image: '{{ upgrade_image }}'
    volume: "{{ volume_info.stdout }}"
    state: activated
    provider: "{{ provider }}"
  when: '"Active" in standby[0]'
  delegate_to: localhost

- name: Wait for previously Active device to be healthy before proceeding
  bigip_command:
    provider: "{{ provider }}"
    match: "any"
    warn: no
    commands:
      - bash -c "cat /var/prompt/ps1"
    wait_for:
      - result[0] contains Active
      - result[0] contains Standby
    retries: 12
    interval: 10
  register: result  
  any_errors_fatal: true  
  when: '"Active" in standby[0]'
  delegate_to: localhost

- debug:
    msg: "Upgrades Completed"